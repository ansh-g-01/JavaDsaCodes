import java.util.*;

public class GraphTraversal {
    int V; 
    List<Integer>[] adj;

    public GraphTraversal(int V) {
        this.V = V;
        adj = new ArrayList[V + 1]; // 1-based indexing
        for (int i = 1; i <= V; i++) {
            adj[i] = new ArrayList<>();
        }
    }

    public void addEdge(int u, int v) {
        adj[u].add(v);
        adj[v].add(u); // Undirected graph
    }

    public void bfs(int start) {
        boolean[] visited = new boolean[V + 1];
        Queue<Integer> queue = new LinkedList<>();
        
        queue.add(start);
        visited[start] = true;

        System.out.print("BFS: ");
        while (!queue.isEmpty()) {
            int node = queue.poll();
            System.out.print(node + " ");

            for (int neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }

    public void dfs(int start, boolean[] visited) {
        visited[start] = true;
        System.out.print(start + " ");

        for (int neighbor : adj[start]) {
            if (!visited[neighbor]) {
                dfs(neighbor, visited);
            }
        }
    }

    public static void main(String[] args) {
        int V = 7;
        String edges = "1 2 1 3 2 4 2 5 3 6 3 7";

        GraphTraversal graph = new GraphTraversal(V);

        String[] tokens = edges.split(" ");
        for (int i = 0; i < tokens.length; i += 2) {
            int u = Integer.parseInt(tokens[i]);
            int v = Integer.parseInt(tokens[i + 1]);
            graph.addEdge(u, v);
        }

        graph.bfs(1);

        System.out.print("DFS: ");
        boolean[] visited = new boolean[V + 1];
        graph.dfs(1, visited);
    }
}
