// left child = 2*n +1 
// right child = 2*n +2
import java.util.ArrayList;

class Solution 
{
    static ArrayList<Integer>  tree ;
    static int n;
    public Solution( ArrayList<Integer> list)
    {
        
        n = list.size();
        tree = list;
        
    }
    public static void LeftTraverse(int curr)
    {
        if (curr>=n ||( curr*2+1 >=n && curr*2+2>=n))
        {
            return;
        }
        System.out.print(tree.get(curr)+" ");
        if (curr*2+1 <n )
        {
            LeftTraverse(curr*2+1); 
        }
        else{
            LeftTraverse(curr*2+2);
        }
    }
    public static void LeafTraverse(int curr)
    {
        if(curr>=n)
        {
            return ;
        }
        if (curr*2 +1 >=n && curr*2 +2 >=n)
        {
            System.out.print(tree.get(curr)+ " ");
            return;
        }
        LeafTraverse(curr*2+1);
        LeafTraverse(curr*2+2);
        
    }
    public static void RightTraverse(int curr)
    {
        if (curr>=n ||( curr*2+1 >=n && curr*2+2>=n))
        {
            return;
        }
        
        if (curr*2+2 <n )
        {
            RightTraverse(curr*2+2); 
        }
        else{
            RightTraverse(curr*2+1);
        }
        System.out.print(tree.get(curr)+" ");
    }
    public static void Traverse(int curr)
    {
        LeftTraverse(curr);
        LeafTraverse(curr);
        RightTraverse(curr+2);
    }
}

class Main 
{
  
    public static void main(String args[])
    {
        ArrayList<Integer>  tree = new ArrayList<>();
        
        for(int i=0;i<=14;i++)
        {
            tree.add(i);
        }
        System.out.println("Preorder traversal is: ");
        Solution s = new Solution(tree);
        
        s.Traverse(0);
    }
    
}



